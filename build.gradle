plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'jacoco'

    id 'org.springframework.boot' version '2.7.8'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'

    id 'org.liquibase.gradle' version '2.0.4'

    id 'org.siouan.frontend-jdk11' version '6.0.0'

    // Плагины для swagger
    // Позволяют получить сгенерированную документацию по API в виде json файла
    id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
    id 'com.github.johnrengelman.processes' version '0.5.0'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.liquibase:liquibase-core'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.modelmapper:modelmapper:3.1.1'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    implementation 'com.querydsl:querydsl-core:5.0.0'
    implementation 'com.querydsl:querydsl-jpa:5.0.0'
    implementation 'org.projectlombok:lombok:1.18.22'

    // Зависимость для swagger
    // Позволяет сгенерировать и проматривать интерактивную документацию по API
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.12'

    implementation 'com.rollbar:rollbar-spring-boot-webmvc:1.8.1'

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
    annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2'
    annotationProcessor 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    liquibaseRuntime(
            sourceSets.main.output,
            'org.liquibase:liquibase-core:4.17.0',
            'org.liquibase.ext:liquibase-hibernate5:4.17.0',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            "org.postgresql:postgresql",
    )
}

application {
    mainClass = 'hexlet.code.AppApplication'
}

compileJava {
    options.release = 17
    options.encoding = 'UTF-8'
}


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.named('test') {
    useJUnitPlatform()
//    finalizedBy jacocoTestReport
}

//test {
//    useJUnitPlatform()
//}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

// Настраиваем таску diffChangeLog таким образом,
// чтобы миграция генерировалась при каждом изменении в модели
diffChangeLog {
    dependsOn compileJava
}

// Настраиваем Liquibase
liquibase {
    activities {
        main {
            // Указываем путь, по которому будет сгенерирован файл миграции
            changeLogFile 'src/main/resources/db/changelog/changelog-master.xml'
            // Указывем источник, с которым будут сравниваться изменения
            // Это база данных, изначально она пустая
            url 'jdbc:h2:./taskManager'
            // Имя пользователя и пароль для подключения к базе
            username 'sa'
            password 'admin'
            // Сравниваем с моделями, задавая пакет
            referenceUrl 'hibernate:spring:hexlet.code.model.' +
                    // Указываем диалект
                    '?dialect=org.hibernate.dialect.H2Dialect' +
                    // Указываем правила именования таблиц и столбцов,
                    // чтобы они соответствовали правилам Spring
                    '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
        }
    }
}

// Сборка фронтенда.
// Выполняется только если ничего не изменилось.
// *****************************************************************************
frontend {
    nodeVersion = '16.13.1'
    installScript = 'install'
    assembleScript = 'run build'
    packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
    inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
    outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
    configure configFrontendTasks

    doLast {
        copy {
            from "$projectDir/frontend/build"
            into "$buildDir/resources/main/static"
        }
    }
}

installFrontend {
    configure configFrontendTasks
}